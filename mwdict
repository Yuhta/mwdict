#!/usr/bin/python

import argparse
import urllib
import webbrowser
import re
from HTMLParser import HTMLParser

class MWParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self._recording = 0
        self._newline_tags = ['p', 'li']
        self._invisible_tags = ['script']
        self._visible = True
        self.data = []

    def handle_starttag(self, tag, attrs):
        if self._recording == 0:
            if tag == 'div':
                for name, value in attrs:
                    if name == 'class' and value == 'inner':
                        self._recording = 1
        elif tag == 'div':
            self._recording += 1
        elif tag == 'br':
            self._add_newline()
        elif tag in self._invisible_tags:
            self._visible = False

    def handle_endtag(self, tag):
        if self._recording > 0:
            if tag == 'div':
                self._recording -= 1
                self._add_newline(2)
            elif tag == 'sup':
                self.data.append(') ')
            elif tag in self._invisible_tags:
                self._visible = True
            elif tag in self._newline_tags:
                self._add_newline()

    def handle_data(self, data):
        if data.isspace():
            if self.data and not self.data[-1][-1].isspace():
                self.data.append(' ')
        elif self._recording > 0 and self._visible:
            self.data.append(re.sub(r'\s+', ' ', data))

    def render(self):
        print "".join(self.data)

    def _add_newline(self, num=1):
        if self.data[-1].isspace():
            if self.data[-1].count('\n') < num:
                self.data[-1] = '\n' * num
        else:
            self.data.append('\n' * num)

###########################
# Entry point starts here #
###########################

arg_parser = argparse.ArgumentParser\
    (description='Look up a word in the dictionary.')
arg_parser.add_argument('word', help='the word you want to look up')
arg_parser.add_argument('-b', '--browser', action='store_true',
                help='use the default browser to open the dictionary')
arg_parser.add_argument('-w', '--wiktionary', action='store_true',
                        help='look up in Wiktionary')
args = arg_parser.parse_args()

mwurl = 'http://www.learnersdictionary.com/search/'
wturl = 'http://en.wiktionary.org/wiki/'

# Decide which dictionary to use
if args.wiktionary:
    url = wturl + args.word
else:
    url = mwurl + args.word

# Whether to use browser
if args.browser:
    webbrowser.open(url)
else:
    page = urllib.urlopen(url)
    if args.wiktionary:
        print 'Under construction...'
    else:
        mw_parser = MWParser()
        mw_parser.feed(page.read())
        mw_parser.render()
        mw_parser.close()
