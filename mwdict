#!/usr/bin/python

import os
from HTMLParser import HTMLParser
import re
import gzip
import argparse
import webbrowser
from os.path import isfile
import urllib
from sys import exit
from tempfile import mkdtemp
from shutil import rmtree, copy
from subprocess import call, check_output

MWENTRIES = os.getenv('HOME') + '/.mwdict/entries/'
MWURL = 'http://www.learnersdictionary.com/search/'
WTURL = 'http://en.wiktionary.org/wiki/'

class MWParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self._PATTERN_SPACE = re.compile(r'\s+')
        self._NEWLINE_TAGS = ['p', 'li', 'h4']
        self._INVISIBLE_TAGS = ['script']
        self._recording = 0
        self._visible = True
        self.data = []

    def handle_starttag(self, tag, attrs):
        if self._recording == 0:
            if tag == 'div':
                for name, value in attrs:
                    if name == 'class' and value == 'inner':
                        self._recording = 1
        elif tag == 'div':
            self._recording += 1
        elif tag == 'br':
            self._add_newline()
        elif tag in self._INVISIBLE_TAGS:
            self._visible = False

    def handle_endtag(self, tag):
        if self._recording > 0:
            if tag == 'div':
                self._recording -= 1
                self._add_newline(2)
            elif tag == 'sup':
                self.data.append(') ')
            elif tag in self._INVISIBLE_TAGS:
                self._visible = True
            elif tag in self._NEWLINE_TAGS:
                self._add_newline()

    def handle_data(self, data):
        if data.isspace():
            if self.data and not self.data[-1][-1].isspace():
                self.data.append(' ')
        elif self._recording > 0 and self._visible:
            self.data.append(self._PATTERN_SPACE.sub(' ', data))

    def render(self):
        print "".join(self.data),

    def save_entry(self, filename):
        if self._found_entry():
            with gzip.open(filename, 'wb') as f:
                f.write("".join(self.data))

    def _add_newline(self, num=1):
        if self.data[-1].isspace():
            if self.data[-1].count('\n') < num:
                self.data[-1] = '\n' * num
        else:
            self.data.append('\n' * num)

    def _found_entry(self):
        return self.data[0] != ("The word you have entered is not in " +
                                "the dictionary. Click on a spelling " +
                                "suggestion below or try your search " +
                                "again.")

def fdupes():
    tmpdir = mkdtemp()

    os.chdir(MWENTRIES)
    for f in os.listdir(MWENTRIES):
        if not os.path.islink(f):
            if f[-3:] != ".gz":
                print "non-entry file:", f
            elif f[-6:-3] == "[1]":
                f0 = f[:-6] + ".gz"
                if isfile(f0):
                    os.remove(f)
                    os.symlink(f0, f)
                    print f, "->", f0
            else:
                copy(f, tmpdir)

    os.chdir(tmpdir)
    call("gunzip *.gz", shell=True)
    print "\n" + check_output(["fdupes", "."]),

    rmtree(tmpdir)

# {{{ Main

arg_parser = argparse.ArgumentParser\
    (description='Look up a word in the dictionary.')
arg_parser.add_argument('word', nargs='?',
                        help='the word you want to look up')
arg_parser.add_argument('-b', '--browser', action='store_true',
                  help='use the default browser to open the dictionary')
arg_parser.add_argument('-w', '--wiktionary', action='store_true',
                        help='look up in Wiktionary')
arg_parser.add_argument('-f', '--fdupes', action='store_true',
                        help='eliminate duplicate entries')
args = arg_parser.parse_args()

# Eliminate duplicates
if args.fdupes:
    fdupes()
    exit()

# Decide which source to use
if args.wiktionary:
    url = WTURL + args.word
else:
    url = MWURL + args.word

if args.browser:
    webbrowser.open(url)
else:
    if args.wiktionary:
        print 'Under construction...'
    else:
        entryfile = MWENTRIES + args.word + '.gz'
        if (isfile(entryfile)):  # Find a local entry file
            with gzip.open(entryfile, 'rb') as f:
                print f.read(),
        else:  # Search online
            page = urllib.urlopen(url)
            mw_parser = MWParser()
            mw_parser.feed(page.read())
            mw_parser.render()
            mw_parser.save_entry(entryfile)
            mw_parser.close()

# }}}
